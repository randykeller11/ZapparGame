{"version":3,"sources":["App.tsx","assets/waving.glb","assets/example-tracking-image.zpt","reportWebVitals.ts","index.tsx"],"names":["action","Model","props","clock","THREE","gltf","useLoader","GLTFLoader","glb","mixer","scene","clipAction","animations","rotateX","Math","PI","useFrame","update","getDelta","object","App","fallback","targetImage","Suspense","rotation","scale","position","intensity","id","role","onKeyPress","play","tabIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uGAeIA,E,gFCfW,MAA0B,mCCA1B,MAA0B,mD,QFiBnCC,EAAQ,SAAC,GAAkB,IAAbC,EAAY,oBACxBC,EAAQ,IAAIC,QACZC,EAAOC,oBAAUC,IAAYC,GAC7BC,EAAQ,IAAIL,iBAAqBC,EAAKK,OAO5C,OALAV,EAASS,EAAME,WAAWN,EAAKO,WAAW,IAC1CP,EAAKK,MAAMG,QAAQC,KAAKC,GAAK,GAE7BC,oBAAS,kBAAMP,EAAMQ,OAAOd,EAAMe,eAE3B,uCAAWC,OAAQd,EAAKK,OAAWR,KAgC7BkB,MA7Bf,WACE,OACE,qCACE,cAAC,uBAAD,IACA,eAAC,eAAD,WACE,cAAC,eAAD,IACA,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAAC,eAAD,CAAcC,YAAaA,EAA3B,SACE,cAAC,IAAMC,SAAP,CAAgBF,SAAU,KAA1B,SACE,cAAC,EAAD,CAAOG,SAAU,CAACV,KAAKC,GAAK,EAAG,EAAG,GAAIU,MAAO,CAAC,GAAK,GAAK,YAI9D,kCAAkBC,SAAU,CAAC,IAAK,EAAG,GAAIC,UAAW,MACpD,cAAC,SAAD,OAEF,qBACEC,GAAG,gBACHC,KAAK,SACLC,WAAY,kBAAM9B,EAAO+B,QACzBC,SAAU,EACVC,QAAS,kBAAMjC,EAAO+B,QALxB,gCGhCSG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.324de6b6.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\nimport { useFrame, useLoader } from \"@react-three/fiber\";\nimport {\n  ZapparCamera,\n  ImageTracker,\n  ZapparCanvas,\n  Loader,\n  BrowserCompatibility,\n} from \"@zappar/zappar-react-three-fiber\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nimport glb from \"./assets/waving.glb\";\nimport targetImage from \"./assets/example-tracking-image.zpt\";\n\nlet action: THREE.AnimationAction;\n\nconst Model = ({ ...props }) => {\n  const clock = new THREE.Clock();\n  const gltf = useLoader(GLTFLoader, glb) as any;\n  const mixer = new THREE.AnimationMixer(gltf.scene);\n\n  action = mixer.clipAction(gltf.animations[0]);\n  gltf.scene.rotateX(Math.PI / 2);\n\n  useFrame(() => mixer.update(clock.getDelta()));\n\n  return <primitive object={gltf.scene} {...props} />;\n};\n\nfunction App() {\n  return (\n    <>\n      <BrowserCompatibility />\n      <ZapparCanvas>\n        <ZapparCamera />\n        <Suspense fallback={null}>\n          <ImageTracker targetImage={targetImage}>\n            <React.Suspense fallback={null}>\n              <Model rotation={[Math.PI / 2, 0, 0]} scale={[0.5, 0.5, 0.5]} />\n            </React.Suspense>\n          </ImageTracker>\n        </Suspense>\n        <directionalLight position={[2.5, 8, 5]} intensity={1.5} />\n        <Loader />\n      </ZapparCanvas>\n      <div\n        id=\"zappar-button\"\n        role=\"button\"\n        onKeyPress={() => action.play()}\n        tabIndex={0}\n        onClick={() => action.play()}\n      >\n        Play Animation\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/waving.2a60fd73.glb\";","export default __webpack_public_path__ + \"static/media/example-tracking-image.775f3d2f.zpt\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}